version: '3.8'

services:
  # Broker MQTT
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: mcp-mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - mcp-network
    restart: unless-stopped

  # Microservice de base
  basic-microservice:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-basic-service
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - SERVICE_ID=basic-microservice
      - API_KEY=secure-api-key-change-me
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      - mosquitto
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('mosquitto', 1883)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Exemple de microservice météo
  weather-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-weather-service
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - SERVICE_ID=weather-service
      - API_KEY=weather-api-key-change-me
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - LOG_LEVEL=INFO
    depends_on:
      - mosquitto
    networks:
      - mcp-network
    restart: unless-stopped

  # Exemple de microservice Docker
  docker-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-docker-service
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - SERVICE_ID=docker-service
      - API_KEY=docker-api-key-change-me
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - mosquitto
    networks:
      - mcp-network
    restart: unless-stopped

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - mcp-network
    restart: unless-stopped

  # Grafana pour la visualisation (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - mcp-network
    restart: unless-stopped

  # MQTT Explorer pour le debugging (optionnel)
  mqtt-explorer:
    image: smeagolworms4/mqtt-explorer
    container_name: mcp-mqtt-explorer
    ports:
      - "4000:4000"
    networks:
      - mcp-network
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  grafana-storage:
    driver: local

# Configuration pour le développement
# Override avec docker-compose.override.yml pour le développement local